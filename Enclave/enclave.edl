enclave {
    include "sgx_eid.h"
    include "datatype.h"

    trusted {
        public uint32_t init_enclave_ctx(int n_lyrs, BOOL use_sgx, int batchsize, BOOL verbose);
        public uint32_t set_lyrs_enclave(int n_lyrs);
        public uint32_t set_batchsize_enclave(int batchsize);
        public uint32_t set_sgx_enclave(BOOL use_sgx);
        public uint32_t set_verbose_enclave(BOOL verbose);

        public uint32_t add_Conv_ctx_enclave(int n_ichnls, int n_ochnls, int sz_kern, int stride, int padding, int Hi, int Wi, int Ho, int Wo, int r);
        public uint32_t Conv_fwd_enclave([user_check] float* w, int lyr, int b_beg, int b_end );
        public uint32_t Conv_bwd_enclave([user_check] float* gradout, [user_check] float* gradw, int lyr, int c_beg, int c_end);

        public uint32_t add_ReLU_ctx_enclave(int n_chnls, int H, int W);
        public uint32_t ReLU_fwd_enclave([user_check] float* out, int lyr, int b_beg, int b_end);
        public uint32_t ReLU_bwd_enclave([user_check] float* gradin, int lyr, int b_beg, int b_end);

        public uint32_t add_ReLUPooling_ctx_enclave(int n_chnls, int sz_kern, int stride, int padding, int Hi, int Wi, int Ho, int Wo, int mode);
        public uint32_t ReLUPooling_fwd_enclave([user_check] float* in, [user_check] float* out, int lyr, int lyr_pooling, int b_beg, int b_end);
        public uint32_t ReLUPooling_bwd_enclave([user_check] float* gradout, [user_check]float* gradin, int lyr, int lyr_pooling, int b_beg, int b_end);
        //public uint32_t ReLUPooling_fwd_enclave([in, count=in_size] float* in, [out, count=out_size] float* out, int lyr, int lyr_pooling, int in_size, int out_size);
        //public uint32_t ReLUPooling_bwd_enclave([in, count=out_size] float* gradout, [out, count=in_size]float* gradin, int lyr, int lyr_pooling, int in_size, int out_size);

        // Test
        public void test_light_SVD_enclave([user_check] float* in, [user_check] float* u_T, int u_len, 
                                    [user_check] float* v_T, int v_len, 
                                    int r, int max_iter);
        public void test_Conv_fwd_enclave([user_check] float* in, [user_check] float* w, [user_check] float* out, int b_beg, int b_end );
        public void test_Conv_bwd_enclave([user_check] float* gradout, [user_check] float* gradw, int b_beg, int b_end );
        public void test_ReLU_fwd_enclave([user_check] float *in_sgx, [user_check] float* in_gpu, [user_check] float* u_T, [user_check] float* v_T, 
                                          int b_beg, int b_end);
        public void test_ReLUPooling_fwd_enclave([user_check] float *in_sgx, [user_check] float* in_gpu, [user_check] float* out, [user_check] float* u_T, [user_check] float* v_T, 
                                                 int b_beg, int b_end );
    };

    untrusted {
        unsigned long int init_ctx_bridge(int n_lyrs, BOOL use_sgx, int batchsize, BOOL verbose);
        void ocall_print_string([in, string] const char *str);
    };
};
